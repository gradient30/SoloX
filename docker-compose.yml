# SoloX Docker Compose 配置
# 用于本地开发和部署

version: '3.8'

services:
  # SoloX 主服务
  solox:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: solox-app
    ports:
      - "50003:50003"
    volumes:
      # 数据持久化
      - ./data:/app/data
      - ./logs:/app/logs
      # USB 设备访问 (Linux)
      - /dev/bus/usb:/dev/bus/usb:rw
    devices:
      # USB 设备权限 (Linux)
      - /dev/bus/usb
    privileged: true  # 需要设备访问权限
    environment:
      - SOLOX_HOST=0.0.0.0
      - SOLOX_PORT=50003
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:50003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - solox-network

  # Nginx 反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: solox-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - solox
    restart: unless-stopped
    networks:
      - solox-network
    profiles:
      - production  # 仅在生产环境启用

  # Redis 缓存 (可选，用于数据缓存)
  redis:
    image: redis:7-alpine
    container_name: solox-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - solox-network
    profiles:
      - cache  # 仅在需要缓存时启用

volumes:
  redis-data:
    driver: local

networks:
  solox-network:
    driver: bridge

# 使用示例:
# 
# 1. 基本启动:
#    docker-compose up -d
# 
# 2. 包含 Nginx 反向代理:
#    docker-compose --profile production up -d
# 
# 3. 包含 Redis 缓存:
#    docker-compose --profile cache up -d
# 
# 4. 完整部署:
#    docker-compose --profile production --profile cache up -d
# 
# 5. 查看日志:
#    docker-compose logs -f solox
# 
# 6. 停止服务:
#    docker-compose down
# 
# 7. 重新构建:
#    docker-compose build --no-cache
